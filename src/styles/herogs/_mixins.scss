/// HeroGS
/// A helper mixin for grids
///
/// @argument {mix} $prop
///   Current state of grid: "wrap", "col" or "gutter".
///
/// @argument {mix} $val1
///   First value of current state if needed.
///
/// @argument {mix} $val2
///   Second value of current state if needed.
///
/// @example
///   .grid {
///     @include gs(wrap); // init wrapper
///     @include gs(gutter, -30); // use negative value for setting gutter for wrapper
///   }
///   .grid__col {
///     @include gs(col); // init column
///     @include gs(gutter, 30); // use positive value for setting gutter for columns
///     @media (min-width: 768px){
///       @include gs(col, 1, 4); // set width for tablet devices and upper
///     }
///   }
///
/// @require {function} gs-strip-unit

@mixin gs-clearfix(){
  &:before,
  &:after {
    content: " "; // 1
    display: table; // 2
  }
  &:after {
    clear: both;
  }
}

@mixin gs-box-sizing(){
  box-sizing: border-box;
}

@mixin gs-wrap-init(){
  @include gs-clearfix;
  @include gs-box-sizing;
}

@mixin gs-col-init(){
  @include gs-box-sizing;
  display: inline-block;
  width: 100%;
  min-height: 1px;
  float: left;
}

@mixin gs-col($val1: null, $val2: null){
  width: percentage($val1 / $val2);
}

@mixin gs-gutter($gutter: null, $item-selector: null){
  @if $item-selector != null {
    margin: gs-strip-unit($gutter / -2)#{px};
    #{$item-selector} {
      padding: gs-strip-unit($gutter / 2)#{px};
    }
  } @else {
    @if $gutter < 0 {
      margin: gs-strip-unit($gutter / 2)#{px};
    } @else {
      padding: gs-strip-unit($gutter / 2)#{px};
    }
  }
}

@mixin gs-gutter-horizontal($gutter: null){
  @if $gutter < 0 {
    margin-left: gs-strip-unit($gutter / 2)#{px};
    margin-right: gs-strip-unit($gutter / 2)#{px};
  } @else {
    padding-left: gs-strip-unit($gutter / 2)#{px};
    padding-right: gs-strip-unit($gutter / 2)#{px};
  }
}

@mixin gs-gutter-vertical($gutter: null){
  @if $gutter < 0 {
    margin-top: gs-strip-unit($gutter / 2)#{px};
    margin-bottom: gs-strip-unit($gutter / 2)#{px};
  } @else {
    padding-top: gs-strip-unit($gutter / 2)#{px};
    padding-bottom: gs-strip-unit($gutter / 2)#{px};
  }
}

@mixin gs-gutter-absolute($gutter: null){
  top: gs-strip-unit($gutter / 2)#{px};
  right: gs-strip-unit($gutter / 2)#{px};
  bottom: gs-strip-unit($gutter / 2)#{px};
  left: gs-strip-unit($gutter / 2)#{px};
}

@mixin gs-masonry-inner-init($prop: null){
  position: relative;
}

@mixin gs-masonry-inner($rows: null, $cols: null, $width: 16, $height: 9){
  padding-bottom: percentage( ($height * $rows) / ($width * $cols) );
}

@mixin gs-masonry-items-init($prop: null){
  @include gs-wrap-init;
  position: absolute;
  left: 0;
  top: 0;
}

@mixin gs-masonry-items($rows: null, $cols: null, $width: 16, $height: 9){
  width: percentage(1/$cols);
  padding-bottom: percentage( $height / ($width * $cols) );
}

@mixin gs-masonry-item-init(){
  @include gs-col-init;

  position: absolute;
  left: 0;
  top: 0;
}

@mixin gs-masonry-item($rows: null, $cols: null, $width: 16, $height: 9, $breakpoint: null){
  @if $breakpoint != null {
    @for $i from 1 through $cols {
      &.#{$breakpoint}-w-#{$i} { width: percentage($i); }
      &.#{$breakpoint}-l-#{$i - 1} { left: percentage($i - 1); }
    }
    @for $i from 1 through $rows {
      &.#{$breakpoint}-h-#{$i} { padding-bottom: percentage( ($height / $width) * $i ); }
      &.#{$breakpoint}-t-#{$i - 1} { top: percentage($i - 1); }
    }
  } @else {
    @for $i from 1 through $cols {
      &.w-#{$i} { width: percentage($i); }
      &.l-#{$i - 1} { left: percentage($i - 1); }
    }
    @for $i from 1 through $rows {
      &.h-#{$i} { padding-bottom: percentage( ($height / $width) * $i ); }
      &.t-#{$i - 1} { top: percentage($i - 1); }
    }
  }
}

@mixin gs-masonry-content-init(){
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;

  overflow: hidden;
}